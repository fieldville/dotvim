snippet perl
    #!/usr/bin/env perl

    use strict;
    use warnings;
    use Carp;
    ${1}

snippet sub
    sub ${1:function_name} {
        my $self = shift;
        ${2:# body...}
        return;
    }

snippet if
    if (${1}) {
        ${2:# body...}
    }

snippet ife
    if (${1}) {
        ${2:# body...}
    } else {
        ${3:# else...}
    }

snippet ifee
    if (${1}) {
        ${2:# body...}
    } elsif (${3}) {
        ${4:# elsif...}
    } else {
        ${5:# else...}
    }

snippet xif
    ${1:expression} if ${2:condition};

snippet while
abbr wh
    while (${1}) {
        ${2:# body...}
    }

snippet xwhile
abbr xwh
    ${1:expression} while ${2:condition};

snippet for
    for (my $${1:var} = 0; $$1 < ${2:expression}; $$1++) {
        ${3:# body...}
    }

snippet fore
    for ${1} (${2:expression}){
        ${3:# body...}
    }

snippet xfor
    ${1:expression} for @${2:array};

snippet unless
abbr un
    unless (${1}) {
        ${2:# body...}
    }

snippet xunless
abbr xun
    ${1:expression} unless ${2:condition};

snippet eval
    eval {
        ${1:# do something risky...}
    };
    if ($@) {
        ${2:# handle failure...}
    }


snippet dp
    use Data::Dumper;
    ${1}

snippet pp
    warn Dumper ${1};

snippet warn
abbr w
    warn "${1}";

snippet shift
abbr s
    my $self = shift;
    ${1}
    return;

snippet u
    #!/usr/bin/env perl
    use 5.10.0;
    use strict;
    use warnings;

snippet d
    use Data::Dump qw(dump);
    warn dump ${0};

snippet dd
    use Data::Dumper;
    local $Data::Dumper::Indent = 1;
    local $Data::Dumper::Terse  = 1;
    warn Dumper ${0};

snippet dds
    use Data::Dump::Streamer qw(Dumper);
    warn Dumper ${0};

snippet c
    use Carp qw/croak/;

snippet n
    sub new {
        my $class = shift;
        my $args = ref $_[0] ? $_[0] : +{@_};

        ${1:code}

        bless $args, $class;
    }

snippet l
    use Class::Accessor::Lite

snippet ll
    Clas::Accessor::Lite->mk_accessors(${1:accessors});

snippet t
    #!/usr/bin/env perl -w
    use strict;
    use Test::More;

    subtest => sub {
    };

    done_testing;

snippet s
    my ($self) = @_;

snippet ex
    use parent qw(Exporter);
    our @EXPORT_OK = qw();

snippet plack
    use Plack::Request;
    sub {
        my $req = Plack::Request->new($_[0]);
        given ($req->path) {
            when ('/') {
                $req->param('');
                return [200, ["Content-Type" => "text/html"], ['200 OK']];
            }
        }
        return [404, ["Content-Type" => "text/plain"], ['404 Not Found']];
    };

snippet file
    use Path::Class qw(file);
    my @lines = file(__FILE__)->dir->file('/path/to/file')->slurp;

snippet r200
    [ 200, ['Content-Type', 'text/plain'], ['200 OK'] ]

snippet r404
    [ 404, ['Content-Type', 'text/plain'], ['404 Not Found'] ]

